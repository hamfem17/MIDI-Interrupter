#include <avr/io.h>
#include <util/delay.h>
#include <math.h>

#include "notes.h"
#include "icl.h"
#include "uart.h"
#include "pwm.h"
#include "deltaTimer.h"
#include "FATfs/ff.h"
#include "FATfs/diskio.h"

int main()
{
	uart::init();
	DeltaTimer::init();
	PWM::init();

	#define MusicSize 414
	int freq;



	FATFS fs;
	FIL fil;
	FRESULT fresult;
	char buffer[256];
	FATFS *pfs;
	DWORD fre_clust;
	unsigned long total, free_space;



	uint8_t music[MusicSize] = {
		0x49, 0x43, 0x4c, 0x00, 0x01, 0x01, 0x75, 0x6e, 0x62, 0x65, 0x6e, 0x61, 0x6e, 0x6e, 0x74, 0x32,
		0x00, 0x00, 0x20, 0x00, 0x0a, 0xd9, 0x84, 0x58, 0x00, 0x47, 0x78, 0x10, 0x47, 0x00, 0x00, 0x4c,
		0x81, 0x34, 0x10, 0x4c, 0x00, 0x00, 0x4f, 0x3c, 0x10, 0x4f, 0x00, 0x00, 0x4e, 0x78, 0x10, 0x4e,
		0x00, 0x00, 0x4c, 0x81, 0x70, 0x10, 0x4c, 0x00, 0x00, 0x53, 0x78, 0x10, 0x53, 0x00, 0x00, 0x51,
		0x82, 0x68, 0x10, 0x51, 0x00, 0x00, 0x4e, 0x82, 0x68, 0x10, 0x4e, 0x00, 0x00, 0x4c, 0x81, 0x34,
		0x10, 0x4c, 0x00, 0x00, 0x4f, 0x3c, 0x10, 0x4f, 0x00, 0x00, 0x4e, 0x78, 0x10, 0x4e, 0x00, 0x00,
		0x4a, 0x81, 0x70, 0x10, 0x4a, 0x00, 0x00, 0x4d, 0x78, 0x10, 0x4d, 0x00, 0x00, 0x47, 0x84, 0x58,
		0x10, 0x47, 0x00, 0x00, 0x47, 0x78, 0x10, 0x47, 0x00, 0x00, 0x4c, 0x81, 0x34, 0x10, 0x4c, 0x00,
		0x00, 0x4f, 0x3c, 0x10, 0x4f, 0x00, 0x00, 0x4e, 0x78, 0x10, 0x4e, 0x00, 0x00, 0x4c, 0x81, 0x70,
		0x10, 0x4c, 0x00, 0x00, 0x53, 0x78, 0x10, 0x53, 0x00, 0x00, 0x56, 0x81, 0x70, 0x10, 0x56, 0x00,
		0x00, 0x55, 0x78, 0x10, 0x55, 0x00, 0x00, 0x54, 0x81, 0x70, 0x10, 0x54, 0x00, 0x00, 0x50, 0x78,
		0x10, 0x50, 0x00, 0x00, 0x54, 0x81, 0x34, 0x10, 0x54, 0x00, 0x00, 0x53, 0x3c, 0x10, 0x53, 0x00,
		0x00, 0x52, 0x78, 0x10, 0x52, 0x00, 0x00, 0x4e, 0x81, 0x70, 0x10, 0x4e, 0x00, 0x00, 0x4f, 0x78,
		0x10, 0x4f, 0x00, 0x00, 0x4c, 0x84, 0x58, 0x10, 0x4c, 0x00, 0x00, 0x4f, 0x78, 0x10, 0x4f, 0x00,
		0x00, 0x53, 0x81, 0x70, 0x10, 0x53, 0x00, 0x00, 0x4f, 0x78, 0x10, 0x4f, 0x00, 0x00, 0x53, 0x81,
		0x70, 0x10, 0x53, 0x00, 0x00, 0x4f, 0x78, 0x10, 0x4f, 0x00, 0x00, 0x54, 0x81, 0x70, 0x10, 0x54,
		0x00, 0x00, 0x53, 0x78, 0x10, 0x53, 0x00, 0x00, 0x52, 0x81, 0x70, 0x10, 0x52, 0x00, 0x00, 0x4e,
		0x78, 0x10, 0x4e, 0x00, 0x00, 0x4f, 0x81, 0x34, 0x10, 0x4f, 0x00, 0x00, 0x53, 0x3c, 0x10, 0x53,
		0x00, 0x00, 0x52, 0x78, 0x10, 0x52, 0x00, 0x00, 0x46, 0x81, 0x70, 0x10, 0x46, 0x00, 0x00, 0x47,
		0x78, 0x10, 0x47, 0x00, 0x00, 0x53, 0x84, 0x58, 0x10, 0x53, 0x00, 0x00, 0x4f, 0x78, 0x10, 0x4f,
		0x00, 0x00, 0x53, 0x81, 0x70, 0x10, 0x53, 0x00, 0x00, 0x4f, 0x78, 0x10, 0x4f, 0x00, 0x00, 0x53,
		0x81, 0x70, 0x10, 0x53, 0x00, 0x00, 0x4f, 0x78, 0x10, 0x4f, 0x00, 0x00, 0x56, 0x81, 0x70, 0x10,
		0x56, 0x00, 0x00, 0x55, 0x78, 0x10, 0x55, 0x00, 0x00, 0x54, 0x81, 0x70, 0x10, 0x54, 0x00, 0x00,
		0x50, 0x78, 0x10, 0x50, 0x00, 0x00, 0x54, 0x81, 0x34, 0x10, 0x54, 0x00, 0x00, 0x53, 0x3c, 0x10,
		0x53, 0x00, 0x00, 0x52, 0x78, 0x10, 0x52, 0x00, 0x00, 0x4e, 0x81, 0x70, 0x10, 0x4e, 0x00, 0x00,
		0x4f, 0x78, 0x10, 0x4f, 0x00, 0x00, 0x4c, 0x84, 0x58, 0x10, 0x4c, 0x00, 0xF0,
	};

	/*
	ICL decoder = ICL(music);

	if(decoder.validateHeader())
	{
		return 1;
	};

	uart::writeString("  DT | EVENT TYPE  | VEL  | NOTE\n");

	while(1)
	{
		Event event = decoder.getNextEvent();

		uart::writeInt(event.deltaTime);
		uart::writeString("       ");

		if(event.type == END_OF_FILE)
		{
			break;
		}

		switch(event.type)
		{
			case NOTE_ON:
				freq = 440 * pow(2, (double)(event.note - 69) / 12);
				DeltaTimer::delay(event.deltaTime);
				PWM::start(freq);
				break;
			case NOTE_OFF:
			 	freq = 440 * pow(2, (double)(event.note - 69) / 12);
				DeltaTimer::delay(event.deltaTime);
				PWM::stop(freq);
				break;
			case SET_TEMPO:
				DeltaTimer::setTempo(event.tempo);
				break;
			case END_OF_FILE:
				break;

		}
	}
	*/

	

	return 0;
}